#include "cpu.h"

void CPU::Preload() {
    // 0x00
    InstructionTable.push_back({ &CPU::NOP,             "NOP",            1,      4 });
    InstructionTable.push_back({ &CPU::LD_BC_U16,       "LD BC, u16",     3,      12 });
    InstructionTable.push_back({ &CPU::LD_ADDR_BC_A,    "LD (BC), A",     1,      8 });
    InstructionTable.push_back({ &CPU::INC_BC,          "INC BC",         1,      8 });
    InstructionTable.push_back({ &CPU::INC_B,           "INC B",          1,      4 });
    InstructionTable.push_back({ &CPU::DEC_B,           "DEC B",          1,      4 });
    InstructionTable.push_back({ &CPU::LD_B_U8,         "LD B, u8",       2,      8 });
    InstructionTable.push_back({ &CPU::RLCA,            "RLCA",           1,      4 });
    InstructionTable.push_back({ &CPU::LD_ADDR_U16_SP,  "LD (u16), SP",   3,      20 });
    InstructionTable.push_back({ &CPU::ADD_HL_BC,       "ADD HL,BC",      1,      8 });
    InstructionTable.push_back({ &CPU::LD_A_ADDR_BC,    "LD A, (BC)",     1,      8 });
    InstructionTable.push_back({ &CPU::DEC_BC,          "DEC BC",         1,      8 });
    InstructionTable.push_back({ &CPU::INC_C,           "INC C",          1,      4 });
    InstructionTable.push_back({ &CPU::DEC_C,           "DEC C",          1,      4 });
    InstructionTable.push_back({ &CPU::LD_C_U8,         "LD C, u8",       2,      8 });
    InstructionTable.push_back({ &CPU::RRCA,            "RRCA",           1,      4 });
    // 0x10
    InstructionTable.push_back({ &CPU::STOP,            "STOP",           1,      4 });
    InstructionTable.push_back({ &CPU::LD_DE_U16,       "LD DE, u16",     3,      12 });
    InstructionTable.push_back({ &CPU::LD_ADDR_DE_A,    "LD (DE), A",     1,      8 });
    InstructionTable.push_back({ &CPU::INC_DE,          "INC DE",         1,      8 });
    InstructionTable.push_back({ &CPU::INC_D,           "INC D",          1,      4 });
    InstructionTable.push_back({ &CPU::DEC_D,           "DEC D",          1,      4 });
    InstructionTable.push_back({ &CPU::LD_D_U8,         "LD D, u8",       2,      8 });
    InstructionTable.push_back({ &CPU::RLA,             "RLA",            1,      4 });
    InstructionTable.push_back({ &CPU::JR_I8,           "JR i8",          2,      12 });
    InstructionTable.push_back({ &CPU::ADD_HL_DE,       "ADD HL,DE",      1,      8 });
    InstructionTable.push_back({ &CPU::LD_A_ADDR_DE,    "LD A, (DE)",     1,      8 });
    InstructionTable.push_back({ &CPU::DEC_DE,          "DEC DE",         1,      8 });
    InstructionTable.push_back({ &CPU::INC_E,           "INC E",          1,      4 });
    InstructionTable.push_back({ &CPU::DEC_E,           "DEC E",          1,      4 });
    InstructionTable.push_back({ &CPU::LD_E_U8,         "LD E, u8",       1,      8 });
    InstructionTable.push_back({ &CPU::RRA,             "RRA",            1,      4 });
    // 0x20
    InstructionTable.push_back({ &CPU::JR_NZ_I8,        "JR NZ, i8",      2,      8 + 12 });
    InstructionTable.push_back({ &CPU::LD_HL_U16,       "LD HL, u16",     3,      12 });
    InstructionTable.push_back({ &CPU::LD_ADDR_HLp_A,   "LD (HL+), A",    1,      8 });
    InstructionTable.push_back({ &CPU::INC_HL,          "INC HL",         1,      8 });
    InstructionTable.push_back({ &CPU::INC_H,           "INC H",          1,      4 });
    InstructionTable.push_back({ &CPU::DEC_H,           "DEC H",          1,      4 });
    InstructionTable.push_back({ &CPU::LD_H_U8,         "LD H, u8",       2,      8 });
    InstructionTable.push_back({ &CPU::DAA,             "DAA",            1,      4 });
    InstructionTable.push_back({ &CPU::JR_Z_I8,         "JR Z, i8",       2,      8 + 12 });
    InstructionTable.push_back({ &CPU::ADD_HL_HL,       "ADD HL, HL",     1,      8 });
    InstructionTable.push_back({ &CPU::LD_A_ADDR_HLp,   "LD A, (HL+)",    1,      8 });
    InstructionTable.push_back({ &CPU::DEC_HL,          "DEC HL",         1,      8 });
    InstructionTable.push_back({ &CPU::INC_L,           "INC L",          1,      4 });
    InstructionTable.push_back({ &CPU::DEC_L,           "DEC L",          1,      4 });
    InstructionTable.push_back({ &CPU::LD_L_U8,         "LD L, u8",       2,      8 });
    InstructionTable.push_back({ &CPU::CPL,             "CPL",            1,      4 });
    // 0x30
    InstructionTable.push_back({ &CPU::JR_NC_I8,        "JR NC, i8",      2,      8 + 12 });
    InstructionTable.push_back({ &CPU::LD_SP_U16,       "LD SP, u16",     3,      12 });
    InstructionTable.push_back({ &CPU::LD_ADDR_HLm_A,   "LD (HL-), A",    1,      8 });
    InstructionTable.push_back({ &CPU::INC_SP,          "INC SP",         1,      8 });
    InstructionTable.push_back({ &CPU::INC_ADDR_HL,     "INC (HL)",       1,      12 });
    InstructionTable.push_back({ &CPU::DEC_ADDR_HL,     "DEC (HL)",       1,      12 });
    InstructionTable.push_back({ &CPU::LD_ADDR_HL_U8,   "LD (HL), u8",    2,      12 });
    InstructionTable.push_back({ &CPU::SCF,             "SCF",            1,      4 });
    InstructionTable.push_back({ &CPU::JR_C_I8,         "JR C, i8",       2,      8 + 12 });
    InstructionTable.push_back({ &CPU::ADD_HL_SP,       "ADD HL, SP",     1,      8 });
    InstructionTable.push_back({ &CPU::LD_A_ADDR_HLm,   "LD A, (HL-)",    1,      8 });
    InstructionTable.push_back({ &CPU::DEC_SP,          "DEC SP",         1,      8 });
    InstructionTable.push_back({ &CPU::INC_A,           "INC A",          1,      4 });
    InstructionTable.push_back({ &CPU::DEC_A,           "DEC A",          1,      4 });
    InstructionTable.push_back({ &CPU::LD_A_U8,         "LD A, u8",       2,      8 });
    InstructionTable.push_back({ &CPU::CCF,             "CCF",            1,      4 });
    // 0x40
    InstructionTable.push_back({ &CPU::LD_B_B,          "LD B, B",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_B_C,          "LD B, C",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_B_D,          "LD B, D",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_B_E,          "LD B, E",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_B_H,          "LD B, H",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_B_L,          "LD B, L",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_B_ADDR_HL,    "LD B, (HL)",     1,      8 });
    InstructionTable.push_back({ &CPU::LD_B_A,          "LD B, A",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_C_B,          "LD C, B",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_C_C,          "LD C, C",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_C_D,          "LD C, D",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_C_E,          "LD C, E",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_C_H,          "LD C, H",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_C_L,          "LD C, L",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_C_ADDR_HL,    "LD C, (HL)",     1,      8 });
    InstructionTable.push_back({ &CPU::LD_C_A,          "LD C, A",        1,      4 });
    // 0x50
    InstructionTable.push_back({ &CPU::LD_D_B,          "LD D, B",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_D_C,          "LD D, C",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_D_D,          "LD D, D",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_D_E,          "LD D, E",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_D_H,          "LD D, H",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_D_L,          "LD D, L",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_D_ADDR_HL,    "LD D, (HL)",     1,      8 });
    InstructionTable.push_back({ &CPU::LD_D_A,          "LD D, A",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_E_B,          "LD E, B",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_E_C,          "LD E, C",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_E_D,          "LD E, D",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_E_E,          "LD E, E",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_E_H,          "LD E, H",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_E_L,          "LD E, L",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_E_ADDR_HL,    "LD E, (HL)",     1,      8 });
    InstructionTable.push_back({ &CPU::LD_E_A,          "LD E, A",        1,      4 });
    // 0x60
    InstructionTable.push_back({ &CPU::LD_H_B,          "LD H, B",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_H_C,          "LD H, C",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_H_D,          "LD H, D",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_H_E,          "LD H, E",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_H_H,          "LD H, H",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_H_L,          "LD H, L",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_H_ADDR_HL,    "LD H, (HL)",     1,      8 });
    InstructionTable.push_back({ &CPU::LD_H_A,          "LD H, A",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_L_B,          "LD L, B",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_L_C,          "LD L, C",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_L_D,          "LD L, D",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_L_E,          "LD L, E",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_L_H,          "LD L, H",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_L_L,          "LD L, L",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_L_ADDR_HL,    "LD L, (HL)",     1,      8 });
    InstructionTable.push_back({ &CPU::LD_L_A,          "LD L, A",        1,      4 });
    // 0x70
    InstructionTable.push_back({ &CPU::LD_ADDR_HL_B,    "LD (HL), B",     1,      4 });
    InstructionTable.push_back({ &CPU::LD_ADDR_HL_C,    "LD (HL), C",     1,      4 });
    InstructionTable.push_back({ &CPU::LD_ADDR_HL_D,    "LD (HL), D",     1,      4 });
    InstructionTable.push_back({ &CPU::LD_ADDR_HL_E,    "LD (HL), E",     1,      4 });
    InstructionTable.push_back({ &CPU::LD_ADDR_HL_H,    "LD (HL), H",     1,      4 });
    InstructionTable.push_back({ &CPU::LD_ADDR_HL_L,    "LD (HL), L",     1,      4 });
    InstructionTable.push_back({ &CPU::HALT,            "HALT",           1,      4 });
    InstructionTable.push_back({ &CPU::LD_ADDR_HL_A,    "LD (HL), A",     1,      4 });
    InstructionTable.push_back({ &CPU::LD_A_B,          "LD A, B",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_A_C,          "LD A, C",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_A_D,          "LD A, D",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_A_E,          "LD A, E",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_A_H,          "LD A, H",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_A_L,          "LD A, L",        1,      4 });
    InstructionTable.push_back({ &CPU::LD_A_ADDR_HL,    "LD A, (HL)",     1,      8 });
    InstructionTable.push_back({ &CPU::LD_A_A,          "LD A, A",        1,      4 });
    // 0x80
    InstructionTable.push_back({ &CPU::ADD_A_B,         "ADD A, B",       1,      4 });
    InstructionTable.push_back({ &CPU::ADD_A_C,         "ADD A, C",       1,      4 });
    InstructionTable.push_back({ &CPU::ADD_A_D,         "ADD A, D",       1,      4 });
    InstructionTable.push_back({ &CPU::ADD_A_E,         "ADD A, E",       1,      4 });
    InstructionTable.push_back({ &CPU::ADD_A_H,         "ADD A, H",       1,      4 });
    InstructionTable.push_back({ &CPU::ADD_A_L,         "ADD A, L",       1,      4 });
    InstructionTable.push_back({ &CPU::ADD_A_ADDR_HL,   "ADD A, (HL))",   1,      8 });
    InstructionTable.push_back({ &CPU::ADD_A_A,         "ADD A, A",       1,      4 });
    InstructionTable.push_back({ &CPU::ADC_A_B,         "ADC A, B",       1,      4 });
    InstructionTable.push_back({ &CPU::ADC_A_C,         "ADC A, C",       1,      4 });
    InstructionTable.push_back({ &CPU::ADC_A_D,         "ADC A, D",       1,      4 });
    InstructionTable.push_back({ &CPU::ADC_A_E,         "ADC A, E",       1,      4 });
    InstructionTable.push_back({ &CPU::ADC_A_H,         "ADC A, H",       1,      4 });
    InstructionTable.push_back({ &CPU::ADC_A_L,         "ADC A, L",       1,      4 });
    InstructionTable.push_back({ &CPU::ADC_A_ADDR_HL,   "ADC A, (HL))",   1,      8 });
    InstructionTable.push_back({ &CPU::ADC_A_A,         "ADC A, A",       1,      4 });
    // 0x90
    InstructionTable.push_back({ &CPU::SUB_A_B,         "SUB A, B",       1,      4 });
    InstructionTable.push_back({ &CPU::SUB_A_C,         "SUB A, C",       1,      4 });
    InstructionTable.push_back({ &CPU::SUB_A_D,         "SUB A, D",       1,      4 });
    InstructionTable.push_back({ &CPU::SUB_A_E,         "SUB A, E",       1,      4 });
    InstructionTable.push_back({ &CPU::SUB_A_H,         "SUB A, H",       1,      4 });
    InstructionTable.push_back({ &CPU::SUB_A_L,         "SUB A, L",       1,      4 });
    InstructionTable.push_back({ &CPU::SUB_A_ADDR_HL,   "SUB A, (HL))",   1,      8 });
    InstructionTable.push_back({ &CPU::SUB_A_A,         "SUB A, A",       1,      4 });
    InstructionTable.push_back({ &CPU::SBC_A_B,         "SBC A, B",       1,      4 });
    InstructionTable.push_back({ &CPU::SBC_A_C,         "SBC A, C",       1,      4 });
    InstructionTable.push_back({ &CPU::SBC_A_D,         "SBC A, D",       1,      4 });
    InstructionTable.push_back({ &CPU::SBC_A_E,         "SBC A, E",       1,      4 });
    InstructionTable.push_back({ &CPU::SBC_A_H,         "SBC A, H",       1,      4 });
    InstructionTable.push_back({ &CPU::SBC_A_L,         "SBC A, L",       1,      4 });
    InstructionTable.push_back({ &CPU::SBC_A_ADDR_HL,   "SBC A, (HL))",   1,      8 });
    InstructionTable.push_back({ &CPU::SBC_A_A,         "SBC A, A",       1,      4 });
    // 0xA0
    InstructionTable.push_back({ &CPU::AND_A_B,         "ADD A, B",       1,      4 });
    InstructionTable.push_back({ &CPU::AND_A_C,         "ADD A, C",       1,      4 });
    InstructionTable.push_back({ &CPU::AND_A_D,         "ADD A, D",       1,      4 });
    InstructionTable.push_back({ &CPU::AND_A_E,         "ADD A, E",       1,      4 });
    InstructionTable.push_back({ &CPU::AND_A_H,         "ADD A, H",       1,      4 });
    InstructionTable.push_back({ &CPU::AND_A_L,         "ADD A, L",       1,      4 });
    InstructionTable.push_back({ &CPU::AND_A_ADDR_HL,   "ADD A, (HL))",   1,      8 });
    InstructionTable.push_back({ &CPU::AND_A_A,         "ADD A, A",       1,      4 });
    InstructionTable.push_back({ &CPU::XOR_A_B,         "XOR A, B",       1,      4 });
    InstructionTable.push_back({ &CPU::XOR_A_C,         "XOR A, C",       1,      4 });
    InstructionTable.push_back({ &CPU::XOR_A_D,         "XOR A, D",       1,      4 });
    InstructionTable.push_back({ &CPU::XOR_A_E,         "XOR A, E",       1,      4 });
    InstructionTable.push_back({ &CPU::XOR_A_H,         "XOR A, H",       1,      4 });
    InstructionTable.push_back({ &CPU::XOR_A_L,         "XOR A, L",       1,      4 });
    InstructionTable.push_back({ &CPU::XOR_A_ADDR_HL,   "XOR A, (HL))",   1,      8 });
    InstructionTable.push_back({ &CPU::XOR_A_A,         "XOR A, A",       1,      4 });
    // 0xB0
    InstructionTable.push_back({ &CPU::OR_A_B,          "OR A, B",        1,      4 });
    InstructionTable.push_back({ &CPU::OR_A_C,          "OR A, C",        1,      4 });
    InstructionTable.push_back({ &CPU::OR_A_D,          "OR A, D",        1,      4 });
    InstructionTable.push_back({ &CPU::OR_A_E,          "OR A, E",        1,      4 });
    InstructionTable.push_back({ &CPU::OR_A_H,          "OR A, H",        1,      4 });
    InstructionTable.push_back({ &CPU::OR_A_L,          "OR A, L",        1,      4 });
    InstructionTable.push_back({ &CPU::OR_A_ADDR_HL,    "OR A, (HL))",    1,      8 });
    InstructionTable.push_back({ &CPU::OR_A_A,          "OR A, A",        1,      4 });
    InstructionTable.push_back({ &CPU::CP_A_B,          "CP A, B",        1,      4 });
    InstructionTable.push_back({ &CPU::CP_A_C,          "CP A, C",        1,      4 });
    InstructionTable.push_back({ &CPU::CP_A_D,          "CP A, D",        1,      4 });
    InstructionTable.push_back({ &CPU::CP_A_E,          "CP A, E",        1,      4 });
    InstructionTable.push_back({ &CPU::CP_A_H,          "CP A, H",        1,      4 });
    InstructionTable.push_back({ &CPU::CP_A_L,          "CP A, L",        1,      4 });
    InstructionTable.push_back({ &CPU::CP_A_ADDR_HL,    "CP A, (HL))",    1,      8 });
    InstructionTable.push_back({ &CPU::CP_A_A,          "CP A, A",        1,      4 });
    // 0xC0
    InstructionTable.push_back({ &CPU::RET_NZ,          "RET NZ",         1,      8 + 20 });
    InstructionTable.push_back({ &CPU::POP_BC,          "POP BC",         1,      12 });
    InstructionTable.push_back({ &CPU::JP_NZ_U16,       "JP_NZ u16",      3,      12 + 16 });
    InstructionTable.push_back({ &CPU::JP_U16,          "JP u16",         3,      16 });
    InstructionTable.push_back({ &CPU::CALL_NZ_U16,     "CALL_NZ u16",    3,      12 + 24 });
    InstructionTable.push_back({ &CPU::PUSH_BC,         "PUSH BC",        1,      16 });
    InstructionTable.push_back({ &CPU::ADD_A_U8,        "ADD A, u8",      2,      8 });
    InstructionTable.push_back({ &CPU::RST_00H,         "RST 00H",        1,      16 });
    InstructionTable.push_back({ &CPU::RET_Z,           "RET Z",          1,      8 + 20 });
    InstructionTable.push_back({ &CPU::RET,             "RET",            1,      16 });
    InstructionTable.push_back({ &CPU::JP_Z_U16,        "JP_Z u16",       3,      12 + 16 });
    InstructionTable.push_back({ &CPU::NOP,             "PREFIX CB",      1,      4 });
    InstructionTable.push_back({ &CPU::CALL_Z_U16,      "CALL_Z u16",     3,      12 + 24 });
    InstructionTable.push_back({ &CPU::CALL_U16,        "CALL u16",       3,      24 });
    InstructionTable.push_back({ &CPU::ADC_A_U8,        "ADD A, u8",      2,      8 });
    InstructionTable.push_back({ &CPU::RST_08H,         "RST 08H",        1,      16 });
    // 0xD0
    InstructionTable.push_back({ &CPU::RET_NC,          "RET NC",         1,      8 + 20 });
    InstructionTable.push_back({ &CPU::POP_DE,          "POP DE",         1,      12 });
    InstructionTable.push_back({ &CPU::JP_NC_U16,       "JP_NC u16",      3,      12 + 16 });
    InstructionTable.push_back({ &CPU::NOP,             "NOP",            3,      16 });
    InstructionTable.push_back({ &CPU::CALL_NC_U16,     "CALL_NC u16",    3,      12 + 24 });
    InstructionTable.push_back({ &CPU::PUSH_DE,         "PUSH DE",        1,      16 });
    InstructionTable.push_back({ &CPU::SUB_A_U8,        "SUB A, u8",      2,      8 });
    InstructionTable.push_back({ &CPU::RST_10H,         "RST 10H",        1,      16 });
    InstructionTable.push_back({ &CPU::RET_C,           "RET C",          1,      8 + 20 });
    InstructionTable.push_back({ &CPU::RETI,            "RETI",           1,      16 });
    InstructionTable.push_back({ &CPU::JP_C_U16,        "JP_C u16",       3,      12 + 16 });
    InstructionTable.push_back({ &CPU::NOP,             "NOP",            0,      0 });
    InstructionTable.push_back({ &CPU::CALL_C_U16,      "CALL_C u16",     3,      12 + 24 });
    InstructionTable.push_back({ &CPU::NOP,             "NOP",            0,      0 });
    InstructionTable.push_back({ &CPU::SBC_A_U8,        "SBC A, u8",      2,      8 });
    InstructionTable.push_back({ &CPU::RST_18H,         "RST 18H",        1,      16 });
    // 0xE0
    InstructionTable.push_back({ &CPU::LD_OFF_U8_A,     "LD (FF00+U8), A",    2,      12 });
    InstructionTable.push_back({ &CPU::POP_HL,          "POP HL",             1,      12 });
    InstructionTable.push_back({ &CPU::LD_OFF_C_A,      "LD (FF00+C), A",     1,      8 });
    InstructionTable.push_back({ &CPU::NOP,             "NOP",                3,      16 });
    InstructionTable.push_back({ &CPU::NOP,             "NOP",                0,      0 });
    InstructionTable.push_back({ &CPU::PUSH_HL,         "PUSH HL",            1,      16 });
    InstructionTable.push_back({ &CPU::AND_A_U8,        "AND A, u8",          2,      8 });
    InstructionTable.push_back({ &CPU::RST_20H,         "RST 20H",            1,      16 });
    InstructionTable.push_back({ &CPU::ADD_SP_I8,       "ADD SP, i8",         2,      16 });
    InstructionTable.push_back({ &CPU::JP_HL,           "JP HL",              1,      4 });
    InstructionTable.push_back({ &CPU::LD_ADDR_U16_A,   "LD (u16), A",        3,      16 });
    InstructionTable.push_back({ &CPU::NOP,             "NOP",                0,      0 });
    InstructionTable.push_back({ &CPU::NOP,             "NOP",                0,      0 });
    InstructionTable.push_back({ &CPU::NOP,             "NOP",                0,      0 });
    InstructionTable.push_back({ &CPU::XOR_A_U8,        "XOR A, u8",          2,      8 });
    InstructionTable.push_back({ &CPU::RST_28H,         "RST 28H",            1,      16 });
    // 0xF0
    InstructionTable.push_back({ &CPU::LD_A_OFF_U8,     "LD A, (FF00+U8)",    2,      12 });
    InstructionTable.push_back({ &CPU::POP_AF,          "POP AF",             1,      12 });
    InstructionTable.push_back({ &CPU::LD_A_OFF_C,      "LD A, (FF00+C)",     1,      8 });
    InstructionTable.push_back({ &CPU::DI,              "DI",                 1,      4 });
    InstructionTable.push_back({ &CPU::NOP,             "NOP",                0,      0 });
    InstructionTable.push_back({ &CPU::PUSH_AF,         "PUSH AF",            1,      16 });
    InstructionTable.push_back({ &CPU::OR_A_U8,         "OR A, u8",           2,      8 });
    InstructionTable.push_back({ &CPU::RST_30H,         "RST 30H",            1,      16 });
    InstructionTable.push_back({ &CPU::LD_HL_SPpI8,     "LD HL, SP+i8",       2,      12 });
    InstructionTable.push_back({ &CPU::LD_SP_HL,        "LD SP, HL",          1,      8 });
    InstructionTable.push_back({ &CPU::LD_A_ADDR_U16,   "LD A, (u16)",        3,      16 });
    InstructionTable.push_back({ &CPU::EI,              "EI",                 1,      4 });
    InstructionTable.push_back({ &CPU::NOP,             "NOP",                0,      0 });
    InstructionTable.push_back({ &CPU::NOP,             "NOP",                0,      0 });
    InstructionTable.push_back({ &CPU::CP_A_U8,         "CP A, u8",           2,      8 });
    InstructionTable.push_back({ &CPU::RST_38H,         "RST 38H",            1,      16 });

    /*  ------------------------ CB ------------------------ */

    // 0x00
    CB_InstructionTable.push_back({ &CPU::RLC_B,            "RLC B",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RLC_C,            "RLC C",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RLC_D,            "RLC D",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RLC_E,            "RLC E",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RLC_H,            "RLC H",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RLC_L,            "RLC L",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RLC_ADDR_HL,      "RLC (HL)",     2,      16 });
    CB_InstructionTable.push_back({ &CPU::RLC_A,            "RLC A",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RRC_B,            "RRC B",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RRC_C,            "RRC C",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RRC_D,            "RRC D",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RRC_E,            "RRC E",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RRC_H,            "RRC H",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RRC_L,            "RRC L",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RRC_ADDR_HL,      "RRC (HL)",     2,      16 });
    CB_InstructionTable.push_back({ &CPU::RRC_A,            "RRC A",        2,      8 });
    // 0x10
    CB_InstructionTable.push_back({ &CPU::RL_B,            "RL B",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RL_C,            "RL C",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RL_D,            "RL D",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RL_E,            "RL E",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RL_H,            "RL H",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RL_L,            "RL L",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RL_ADDR_HL,      "RL (HL)",     2,      16 });
    CB_InstructionTable.push_back({ &CPU::RL_A,            "RL A",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RR_B,            "RR B",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RR_C,            "RR C",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RR_D,            "RR D",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RR_E,            "RR E",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RR_H,            "RR H",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RR_L,            "RR L",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::RR_ADDR_HL,      "RR (HL)",     2,      16 });
    CB_InstructionTable.push_back({ &CPU::RR_A,            "RR A",        2,      8 });
    // 0x20
    CB_InstructionTable.push_back({ &CPU::SLA_B,            "SLA B",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::SLA_C,            "SLA C",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::SLA_D,            "SLA D",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::SLA_E,            "SLA E",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::SLA_H,            "SLA H",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::SLA_L,            "SLA L",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::SLA_ADDR_HL,      "SLA (HL)",     2,      16 });
    CB_InstructionTable.push_back({ &CPU::SLA_A,            "SLA A",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::SRA_B,            "SRA B",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::SRA_C,            "SRA C",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::SRA_D,            "SRA D",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::SRA_E,            "SRA E",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::SRA_H,            "SRA H",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::SRA_L,            "SRA L",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::SRA_ADDR_HL,      "SRA (HL)",     2,      16 });
    CB_InstructionTable.push_back({ &CPU::SRA_A,            "SRA A",        2,      8 });
    // 0x30
    CB_InstructionTable.push_back({ &CPU::SWAP_B,           "SWAP B",       2,      8 });
    CB_InstructionTable.push_back({ &CPU::SWAP_C,           "SWAP C",       2,      8 });
    CB_InstructionTable.push_back({ &CPU::SWAP_D,           "SWAP D",       2,      8 });
    CB_InstructionTable.push_back({ &CPU::SWAP_E,           "SWAP E",       2,      8 });
    CB_InstructionTable.push_back({ &CPU::SWAP_H,           "SWAP H",       2,      8 });
    CB_InstructionTable.push_back({ &CPU::SWAP_L,           "SWAP L",       2,      8 });
    CB_InstructionTable.push_back({ &CPU::SWAP_ADDR_HL,     "SWAP (HL)",    2,      16 });
    CB_InstructionTable.push_back({ &CPU::SWAP_A,           "SWAP A",       2,      8 });
    CB_InstructionTable.push_back({ &CPU::SRL_B,            "SRL B",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::SRL_C,            "SRL C",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::SRL_D,            "SRL D",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::SRL_E,            "SRL E",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::SRL_H,            "SRL H",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::SRL_L,            "SRL L",        2,      8 });
    CB_InstructionTable.push_back({ &CPU::SRL_ADDR_HL,      "SRL (HL)",     2,      16 });
    CB_InstructionTable.push_back({ &CPU::SRL_A,            "SRL A",        2,      8 });
    // 0x40
    CB_InstructionTable.push_back({ &CPU::BIT_0_B,          "BIT 0, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_0_C,          "BIT 0, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_0_D,          "BIT 0, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_0_E,          "BIT 0, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_0_H,          "BIT 0, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_0_L,          "BIT 0, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_0_ADDR_HL,    "BIT 0, (HL)",  2,      12 });
    CB_InstructionTable.push_back({ &CPU::BIT_0_A,          "BIT 0, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_1_B,          "BIT 1, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_1_C,          "BIT 1, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_1_D,          "BIT 1, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_1_E,          "BIT 1, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_1_H,          "BIT 1, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_1_L,          "BIT 1, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_1_ADDR_HL,    "BIT 1, (HL)",  2,      12 });
    CB_InstructionTable.push_back({ &CPU::BIT_1_A,          "BIT 1, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_2_B,          "BIT 2, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_2_C,          "BIT 2, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_2_D,          "BIT 2, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_2_E,          "BIT 2, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_2_H,          "BIT 2, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_2_L,          "BIT 2, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_2_ADDR_HL,    "BIT 2, (HL)",  2,      12 });
    CB_InstructionTable.push_back({ &CPU::BIT_2_A,          "BIT 2, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_3_B,          "BIT 3, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_3_C,          "BIT 3, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_3_D,          "BIT 3, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_3_E,          "BIT 3, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_3_H,          "BIT 3, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_3_L,          "BIT 3, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_3_ADDR_HL,    "BIT 3, (HL)",  2,      12 });
    CB_InstructionTable.push_back({ &CPU::BIT_3_A,          "BIT 3, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_4_B,          "BIT 4, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_4_C,          "BIT 4, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_4_D,          "BIT 4, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_4_E,          "BIT 4, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_4_H,          "BIT 4, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_4_L,          "BIT 4, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_4_ADDR_HL,    "BIT 4, (HL)",  2,      12 });
    CB_InstructionTable.push_back({ &CPU::BIT_4_A,          "BIT 4, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_5_B,          "BIT 5, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_5_C,          "BIT 5, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_5_D,          "BIT 5, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_5_E,          "BIT 5, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_5_H,          "BIT 5, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_5_L,          "BIT 5, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_5_ADDR_HL,    "BIT 5, (HL)",  2,      12 });
    CB_InstructionTable.push_back({ &CPU::BIT_5_A,          "BIT 5, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_6_B,          "BIT 6, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_6_C,          "BIT 6, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_6_D,          "BIT 6, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_6_E,          "BIT 6, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_6_H,          "BIT 6, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_6_L,          "BIT 6, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_6_ADDR_HL,    "BIT 6, (HL)",  2,      12 });
    CB_InstructionTable.push_back({ &CPU::BIT_6_A,          "BIT 6, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_7_B,          "BIT 7, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_7_C,          "BIT 7, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_7_D,          "BIT 7, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_7_E,          "BIT 7, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_7_H,          "BIT 7, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_7_L,          "BIT 7, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::BIT_7_ADDR_HL,    "BIT 7, (HL)",  2,      12 });
    CB_InstructionTable.push_back({ &CPU::BIT_7_A,          "BIT 7, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_0_B,          "RES 0, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_0_C,          "RES 0, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_0_D,          "RES 0, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_0_E,          "RES 0, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_0_H,          "RES 0, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_0_L,          "RES 0, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_0_ADDR_HL,    "RES 0, (HL)",  2,      16 });
    CB_InstructionTable.push_back({ &CPU::RES_0_A,          "RES 0, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_1_B,          "RES 1, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_1_C,          "RES 1, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_1_D,          "RES 1, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_1_E,          "RES 1, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_1_H,          "RES 1, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_1_L,          "RES 1, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_1_ADDR_HL,    "RES 1, (HL)",  2,      16 });
    CB_InstructionTable.push_back({ &CPU::RES_1_A,          "RES 1, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_2_B,          "RES 2, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_2_C,          "RES 2, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_2_D,          "RES 2, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_2_E,          "RES 2, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_2_H,          "RES 2, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_2_L,          "RES 2, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_2_ADDR_HL,    "RES 2, (HL)",  2,      16 });
    CB_InstructionTable.push_back({ &CPU::RES_2_A,          "RES 2, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_3_B,          "RES 3, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_3_C,          "RES 3, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_3_D,          "RES 3, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_3_E,          "RES 3, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_3_H,          "RES 3, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_3_L,          "RES 3, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_3_ADDR_HL,    "RES 3, (HL)",  2,      16 });
    CB_InstructionTable.push_back({ &CPU::RES_3_A,          "RES 3, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_4_B,          "RES 4, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_4_C,          "RES 4, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_4_D,          "RES 4, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_4_E,          "RES 4, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_4_H,          "RES 4, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_4_L,          "RES 4, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_4_ADDR_HL,    "RES 4, (HL)",  2,      16 });
    CB_InstructionTable.push_back({ &CPU::RES_4_A,          "RES 4, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_5_B,          "RES 5, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_5_C,          "RES 5, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_5_D,          "RES 5, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_5_E,          "RES 5, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_5_H,          "RES 5, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_5_L,          "RES 5, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_5_ADDR_HL,    "RES 5, (HL)",  2,      16 });
    CB_InstructionTable.push_back({ &CPU::RES_5_A,          "RES 5, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_6_B,          "RES 6, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_6_C,          "RES 6, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_6_D,          "RES 6, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_6_E,          "RES 6, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_6_H,          "RES 6, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_6_L,          "RES 6, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_6_ADDR_HL,    "RES 6, (HL)",  2,      16 });
    CB_InstructionTable.push_back({ &CPU::RES_6_A,          "RES 6, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_7_B,          "RES 7, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_7_C,          "RES 7, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_7_D,          "RES 7, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_7_E,          "RES 7, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_7_H,          "RES 7, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_7_L,          "RES 7, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::RES_7_ADDR_HL,    "RES 7, (HL)",  2,      16 });
    CB_InstructionTable.push_back({ &CPU::RES_7_A,          "RES 7, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_0_B,          "SET 0, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_0_C,          "SET 0, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_0_D,          "SET 0, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_0_E,          "SET 0, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_0_H,          "SET 0, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_0_L,          "SET 0, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_0_ADDR_HL,    "SET 0, (HL)",  2,      16 });
    CB_InstructionTable.push_back({ &CPU::SET_0_A,          "SET 0, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_1_B,          "SET 1, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_1_C,          "SET 1, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_1_D,          "SET 1, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_1_E,          "SET 1, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_1_H,          "SET 1, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_1_L,          "SET 1, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_1_ADDR_HL,    "SET 1, (HL)",  2,      16 });
    CB_InstructionTable.push_back({ &CPU::SET_1_A,          "SET 1, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_2_B,          "SET 2, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_2_C,          "SET 2, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_2_D,          "SET 2, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_2_E,          "SET 2, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_2_H,          "SET 2, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_2_L,          "SET 2, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_2_ADDR_HL,    "SET 2, (HL)",  2,      16 });
    CB_InstructionTable.push_back({ &CPU::SET_2_A,          "SET 2, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_3_B,          "SET 3, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_3_C,          "SET 3, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_3_D,          "SET 3, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_3_E,          "SET 3, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_3_H,          "SET 3, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_3_L,          "SET 3, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_3_ADDR_HL,    "SET 3, (HL)",  2,      16 });
    CB_InstructionTable.push_back({ &CPU::SET_3_A,          "SET 3, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_4_B,          "SET 4, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_4_C,          "SET 4, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_4_D,          "SET 4, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_4_E,          "SET 4, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_4_H,          "SET 4, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_4_L,          "SET 4, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_4_ADDR_HL,    "SET 4, (HL)",  2,      16 });
    CB_InstructionTable.push_back({ &CPU::SET_4_A,          "SET 4, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_5_B,          "SET 5, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_5_C,          "SET 5, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_5_D,          "SET 5, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_5_E,          "SET 5, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_5_H,          "SET 5, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_5_L,          "SET 5, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_5_ADDR_HL,    "SET 5, (HL)",  2,      16 });
    CB_InstructionTable.push_back({ &CPU::SET_5_A,          "SET 5, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_6_B,          "SET 6, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_6_C,          "SET 6, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_6_D,          "SET 6, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_6_E,          "SET 6, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_6_H,          "SET 6, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_6_L,          "SET 6, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_6_ADDR_HL,    "SET 6, (HL)",  2,      16 });
    CB_InstructionTable.push_back({ &CPU::SET_6_A,          "SET 6, A",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_7_B,          "SET 7, B",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_7_C,          "SET 7, C",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_7_D,          "SET 7, D",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_7_E,          "SET 7, E",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_7_H,          "SET 7, H",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_7_L,          "SET 7, L",     2,      8 });
    CB_InstructionTable.push_back({ &CPU::SET_7_ADDR_HL,    "SET 7, (HL)",  2,      16 });
    CB_InstructionTable.push_back({ &CPU::SET_7_A,          "SET 7, A",     2,      8 });
}